diff --git a/modules/juce_events/native/juce_Messaging_linux.cpp b/modules/juce_events/native/juce_Messaging_linux.cpp
index d18131bbf5..d76daed862 100644
--- a/modules/juce_events/native/juce_Messaging_linux.cpp
+++ b/modules/juce_events/native/juce_Messaging_linux.cpp
@@ -32,6 +32,12 @@
   ==============================================================================
 */
 
+#if defined(JUCE_LINUX_USE_GLIB_MAINLOOP) && JUCE_LINUX_USE_GLIB_MAINLOOP
+#include <glib.h>
+
+static GMainLoop* g_main_loop = nullptr;
+#endif
+
 namespace juce
 {
 
@@ -315,10 +321,25 @@ void MessageManager::doPlatformSpecificInitialisation()
 
     InternalRunLoop::getInstance();
     InternalMessageQueue::getInstance();
+
+
+#if defined(JUCE_LINUX_USE_GLIB_MAINLOOP) && JUCE_LINUX_USE_GLIB_MAINLOOP
+    jassert (g_main_loop == nullptr);
+    g_main_loop = g_main_loop_new (nullptr, false);
+#endif
 }
 
 void MessageManager::doPlatformSpecificShutdown()
 {
+#if defined(JUCE_LINUX_USE_GLIB_MAINLOOP) && JUCE_LINUX_USE_GLIB_MAINLOOP
+    if (g_main_loop != nullptr)
+    {
+        g_main_loop_quit (g_main_loop);
+        g_main_loop_unref (g_main_loop);
+        g_main_loop = nullptr;
+    }
+#endif
+
     InternalMessageQueue::deleteInstance();
     InternalRunLoop::deleteInstance();
 }
@@ -349,15 +370,23 @@ bool dispatchNextMessageOnSystemQueue (bool returnIfNoPendingMessages)
         if (LinuxErrorHandling::keyboardBreakOccurred)
             JUCEApplicationBase::quit();
 
+        bool hadGlibEvent = false;
+#if defined(JUCE_LINUX_USE_GLIB_MAINLOOP) && JUCE_LINUX_USE_GLIB_MAINLOOP
+        hadGlibEvent = g_main_context_iteration (nullptr, false);
+#endif
+
+
         if (auto* runLoop = InternalRunLoop::getInstanceWithoutCreating())
         {
             if (runLoop->dispatchPendingEvents())
-                break;
+                return true; // JUCE events were processed
 
-            if (returnIfNoPendingMessages)
+            if (returnIfNoPendingMessages && !hadGlibEvent)
                 return false;
 
-            runLoop->sleepUntilNextEvent (2000);
+            // Only sleep if we didn't process any glib events
+            if (!hadGlibEvent)
+                runLoop->sleepUntilNextEvent (2000);
         }
     }
 
